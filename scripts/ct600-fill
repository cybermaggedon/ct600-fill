#!/usr/bin/env python3

# Reads a UK corporation tax computations file (iXBRL containing HMRC
# corporation tax schema), and annotates a CT600 PDF template with
# the numbers.

import datetime
import xml.etree.ElementTree as ET
import sys
import argparse
import yaml

from PyPDF2 import PdfFileWriter, PdfFileReader

from ct600_fill.computations import get_computations
from ct600_fill.annotations import create_annotations, get_page, get_spec

def create_pdf(outf, template, annotations):

    output = PdfFileWriter()

    for page in range(0, template.getNumPages()):
        page_data = template.getPage(page)
        output.addPage(page_data)

        if page in annotations:

            overlay = get_page(annotations, page)

            overlay_pdf = PdfFileReader(overlay)

            page_data.mergePage(overlay_pdf.getPage(0))

    output.write(outf)

# Command-line argument parser
parser = argparse.ArgumentParser(
    description="iXBRL to CT600"
)
parser.add_argument('--input', '-i',
                    default="comps.html",
                    help='Input computations file (default: comps.html)')
parser.add_argument('--output', '-o',
                    default="output.pdf",
                    help='Output PDF file')
parser.add_argument('--ct600', '-c',
                    default="CT600.pdf",
                    help='Input CT600 form')
parser.add_argument('--spec', '-s',
                    default="spec.json",
                    help='Annotation specificiations file (default: spec.json)')
parser.add_argument('--verbose', '-v', action='store_true',
                    help='Turn on verbose output.')

# Parse arguments
args = parser.parse_args(sys.argv[1:])

form_values = open(args.input, "r").read()
values = yaml.safe_load(form_values)
sys.stderr.write("Read %s.\n" % args.input)

#if args.verbose:
#    for k, v in values.items():
#        print("%-50s: %s" % (k, v))

spec = get_spec(args.spec)
annotations = create_annotations(values, spec)

template = PdfFileReader(open(args.ct600, "rb"))
sys.stderr.write("Opened %s.\n" % args.ct600)

# finally, write "output" to a real file
with open(args.output, "wb") as f:
    create_pdf(f, template, annotations)

sys.stderr.write("Wrote %s.\n" % args.output)

